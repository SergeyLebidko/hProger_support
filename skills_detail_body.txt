Первым языком программирования, который я начал изучать была {Java}. Сейчас я уже не занимаюсь этим
языком, так как полностью перешел на {Python} и {JS} (и не вижу ни одной причины, по которой {Java}
была бы лучше {Python}), но я не считаю, что зря потратил время работая с этим языком.
*
Работая с {Java} я изучил основные концепции ООП, узнал что такое статическая и динамическая типизация,
что такое интерфейс, что такое открытые и закрытые члены класса, что такое исключения, что такое события
и как их обрабатывать и многое другое. Это потом очень помогло мне при изучении {Python} и {JS}.
*
На {Java} я писал, как это не покажется сейчас странным, дектопные приложения. Использовал библиотеку {Swing}.
Даже умудрился написать несколько игрушек (например, Тетрис) и два простых файловых менеджера. Все эти
проекты до сих пор лежат в моём аккаунте на {github}.
*
Но потом я решил поработать немного с языком {Python}. Сначала просто для того, чтобы иметь о нем какое-то
базовое представление. Но я быстро понял, что он превосходит {Java} если и не во всём, то уж точно в очень многих
аспектах.
*
{Python} чрезвычайно лаконичен, но при этом код на нем, не теряет читаемости. Сходные задачи на {Python} решаются
меньшим количеством кода, чем на {Java}. {Python} не заставляет подчиняться только одной парадигме (ООП, как в {Java}) и
дает возможность выбирать, в каком-стиле писать код. Отсутствие строгой типизации дает возможность еще более гибкой
работы с объектами, чем в {Java}. В {Python} буквально со старта обучения доступны такие типы как list, dict и set.
Для работы с чем-то похожим в {Java} придется освоить целый микрофреймворк - {Collection Framework}.
*
Я мог бы еще долго рассказывать, чем мне понравился {Python}, но познакомившись с ним, я сразу отказался от {Java}
и больше не возвращался к ней. Я думаю, что за {Python} - будущее.
*
Первыми моими проектами на {Python} были игры.
*
На самом деле написание игр, как я считаю, является прекрасным упражнением при изучении, наверное, любого языка.
Есть, конечно, сайты типа [https://www.codewars.com/][codewars] с массой упражнений разной степени сложности для
отработки навыков. Но у меня с такими сайтами как-то не срослось. Выполнение упражнений наводило на меня тоску. Да, я
получал результат, но я не получал никакого конечного продукта. Результатом таких тренировок не могла стать программа,
которую можно было бы взять, запустить и пользоваться ею. Поэтому я изначально взял курс именно на создание готовых
программных продуктов, имеющих какую-то, пусть и простую, функциональность.
*
Так как уже довольно давно происходит переход ко все большему использованию WEB-сервисов вместо
локально устанавливаемых приложений, то освоение соответствующих технологий представлялось мне логичным шагом после
изучения основ языка. Я посмотрел, что может предложить мне в этом плане {Python}. Так я узнал о фреймворке {Django} и о том,
что с его помощью можно быстро создать какой-либо сайт и запустить его пусть даже и локально.
*
Первые мои попытки что-то сделать были очень корявыми :) Сказывалось незнание элементарных основ: что такое http-методы,
что такое заголовки, что такое api, какой путь запрос и ответ на него проделывают внутри самого {Django} и т.д.
*
Но постепенно я набирался знаний в этой области и дело пошло на лад.
*
Но используя один только {Python} и {Django} нельзя заставить страницы выглядеть хоть сколько-нибудь красиво и быть
функциональными. Я понял, что мне требуется изучить основы сначала {CSS} (для придания презентабельного внешнего вида),
а затем и {JS} (ибо без интерактивности web-страницы представить сейчас просто невозможно).
*
Все началось с простых задач: поменять цвет элемента при нажатии на кнопку, добавить или удалить элемент и т.д.
Но я быстро понял, что использование чистого {JS} - это весьма неудобно и не зря же для {JS} написали кучу библиотек,
автоматизирующих рутинные операции.
*
Первой {JS}-библиотекой, с которой я начал работать была {jQuery}. Она дала мне на тот момент все, что было нужно:
легкое управление созданием и удалением элементов, легкое управление стилями, легкое управление событиями и (наверное,
самое главное) очень простой способ создания ajax-запросов! К тому же мне очень нравилась концепция последовательного
выполнения действий над коллекцией {jQuery}, когда различные действия можно просто выстраивать в цепочку в одной строке!
Я был восхищен.
*
Ровно до того момента, когда захотел написать на {jQuery}, {Django} и {Django Rest Framework} некое подобие простой
информационной системы для учета товаров на складе. С бэкендом проблем не возникло, а вот с фронтендом возникла масса
сложностей. {HTML} и {JS}-код находились в разных частях файла, что было очень неудобно. Код, который управляет компонентами
был далеко от самих компонетов. Но самой большой проблемой было даже не это, а необходимость учитывать и следить за
взаимосвязями между различными элементами страницы. {jQuery} хорошо работал для упрощения рутинных операций, но
взаимодействие между элементами (списками, таблицами, полями ввода и т.д.) он никак не упрощал...
*
Мне нужно было что-то подобное компонентам интерфейса {Swing} в языке {Java}, но для среды браузера. Так я подошел к
изучению библиотеки {React}.
*
С помощью {React} я решил проблему взаимодействия компонентов и первый же написанный на нем pet-проект дался мне
существенно проще, чем до этого аналогичный на {jQuery}. К тому же концепция компонентов в {React} похожа на концепцию
компонентов в {Swing}, с которым я уже был знаком. Это очень помогло мне в понимании принципов работы библиотеки.
*
Сейчас я продолжаю осваивать возможности {React}, параллельно стараюсь не забывать о {Python} и ищу работу на реальном
проекте, которая позволила бы мне прокачивать скилл разработчика.